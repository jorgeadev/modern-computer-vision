{"cells":[{"cell_type":"markdown","metadata":{"id":"Dojt9shfPcrV"},"source":["![](https://github.com/rajeevratan84/ModernComputerVision/raw/main/logo_MCV_W.png)\n","\n","# **Vision Transformer Tutorial**\n","\n","\n","# Image classification with Vision Transformer\n","\n","Source & Credit - Official Keras colab notebook.\n","\n","**Author:** [Khalid Salama](https://www.linkedin.com/in/khalid-salama-24403144/)<br>\n","**Date created:** 2021/01/18<br>\n","**Last modified:** 2021/01/18<br>\n","**Description:** Implementing the Vision Transformer (ViT) model for image classification."]},{"cell_type":"markdown","metadata":{"id":"QYpj5nJSPcrY"},"source":["## Introduction\n","\n","This example implements the [Vision Transformer (ViT)](https://arxiv.org/abs/2010.11929)\n","model by Alexey Dosovitskiy et al. for image classification,\n","and demonstrates it on the CIFAR-100 dataset.\n","The ViT model applies the Transformer architecture with self-attention to sequences of\n","image patches, without using convolution layers.\n","\n","This example requires TensorFlow 2.4 or higher, as well as\n","[TensorFlow Addons](https://www.tensorflow.org/addons/overview),\n","which can be installed using the following command:\n","\n","```python\n","pip install -U tensorflow-addons\n","```"]},{"cell_type":"markdown","metadata":{"id":"JrSR7M6_PcrZ"},"source":["## Setup"]},{"cell_type":"code","source":["!pip install -U tensorflow-addons"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LM2-fBMNeaxx","executionInfo":{"status":"ok","timestamp":1644091281647,"user_tz":0,"elapsed":4100,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}},"outputId":"7a05728b-5bd8-48a2-e594-6a15fa73a50b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tensorflow-addons\n","  Downloading tensorflow_addons-0.15.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB)\n","\u001b[K     |████████████████████████████████| 1.1 MB 4.1 MB/s \n","\u001b[?25hRequirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (2.7.1)\n","Installing collected packages: tensorflow-addons\n","Successfully installed tensorflow-addons-0.15.0\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q2N129DQPcrZ"},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import tensorflow_addons as tfa"]},{"cell_type":"markdown","metadata":{"id":"nnrYfttxPcra"},"source":["## Prepare the data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UiZjzrHmPcrb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644091415723,"user_tz":0,"elapsed":13462,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}},"outputId":"18a4740d-181e-438f-f389-1ab28e138088"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\n","169009152/169001437 [==============================] - 10s 0us/step\n","169017344/169001437 [==============================] - 10s 0us/step\n","x_train shape: (50000, 32, 32, 3) - y_train shape: (50000, 1)\n","x_test shape: (10000, 32, 32, 3) - y_test shape: (10000, 1)\n"]}],"source":["num_classes = 100\n","input_shape = (32, 32, 3)\n","\n","(x_train, y_train), (x_test, y_test) = keras.datasets.cifar100.load_data()\n","\n","print(f\"x_train shape: {x_train.shape} - y_train shape: {y_train.shape}\")\n","print(f\"x_test shape: {x_test.shape} - y_test shape: {y_test.shape}\")"]},{"cell_type":"markdown","metadata":{"id":"XiNlcWEjPcrb"},"source":["## Configure the hyperparameters"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m6vtANL-Pcrc"},"outputs":[],"source":["learning_rate = 0.001\n","weight_decay = 0.0001\n","batch_size = 256\n","num_epochs = 100\n","image_size = 72  # We'll resize input images to this size\n","patch_size = 6  # Size of the patches to be extract from the input images\n","num_patches = (image_size // patch_size) ** 2\n","projection_dim = 64\n","num_heads = 4\n","transformer_units = [\n","    projection_dim * 2,\n","    projection_dim,\n","]  # Size of the transformer layers\n","transformer_layers = 8\n","mlp_head_units = [2048, 1024]  # Size of the dense layers of the final classifier"]},{"cell_type":"markdown","metadata":{"id":"t1MzYP8rPcrd"},"source":["## Use data augmentation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sNlcxCpFPcrd"},"outputs":[],"source":["data_augmentation = keras.Sequential(\n","    [\n","        layers.Normalization(),\n","        layers.Resizing(image_size, image_size),\n","        layers.RandomFlip(\"horizontal\"),\n","        layers.RandomRotation(factor=0.02),\n","        layers.RandomZoom(\n","            height_factor=0.2, width_factor=0.2\n","        ),\n","    ],\n","    name=\"data_augmentation\",\n",")\n","# Compute the mean and the variance of the training data for normalization.\n","data_augmentation.layers[0].adapt(x_train)"]},{"cell_type":"markdown","metadata":{"id":"sGJ3HJV1Pcre"},"source":["## Implement multilayer perceptron (MLP)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Lhjfb2CPcre"},"outputs":[],"source":["def mlp(x, hidden_units, dropout_rate):\n","    for units in hidden_units:\n","        x = layers.Dense(units, activation=tf.nn.gelu)(x)\n","        x = layers.Dropout(dropout_rate)(x)\n","    return x"]},{"cell_type":"markdown","metadata":{"id":"LzWwGmfRPcre"},"source":["## Implement patch creation as a layer"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V1A7Jb-APcrf"},"outputs":[],"source":["class Patches(layers.Layer):\n","    def __init__(self, patch_size):\n","        super(Patches, self).__init__()\n","        self.patch_size = patch_size\n","\n","    def call(self, images):\n","        batch_size = tf.shape(images)[0]\n","        patches = tf.image.extract_patches(\n","            images=images,\n","            sizes=[1, self.patch_size, self.patch_size, 1],\n","            strides=[1, self.patch_size, self.patch_size, 1],\n","            rates=[1, 1, 1, 1],\n","            padding=\"VALID\",\n","        )\n","        patch_dims = patches.shape[-1]\n","        patches = tf.reshape(patches, [batch_size, -1, patch_dims])\n","        return patches"]},{"cell_type":"markdown","metadata":{"id":"zv24egjAPcrf"},"source":["Let's display patches for a sample image"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BIj4px6gPcrf","colab":{"base_uri":"https://localhost:8080/","height":549},"executionInfo":{"status":"ok","timestamp":1644091484189,"user_tz":0,"elapsed":4554,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}},"outputId":"0a8c9a87-f6ef-49ab-dd5b-db249dca5fe9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Image size: 72 X 72\n","Patch size: 6 X 6\n","Patches per image: 144\n","Elements per patch: 108\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x288 with 144 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(4, 4))\n","image = x_train[np.random.choice(range(x_train.shape[0]))]\n","plt.imshow(image.astype(\"uint8\"))\n","plt.axis(\"off\")\n","\n","resized_image = tf.image.resize(\n","    tf.convert_to_tensor([image]), size=(image_size, image_size)\n",")\n","patches = Patches(patch_size)(resized_image)\n","print(f\"Image size: {image_size} X {image_size}\")\n","print(f\"Patch size: {patch_size} X {patch_size}\")\n","print(f\"Patches per image: {patches.shape[1]}\")\n","print(f\"Elements per patch: {patches.shape[-1]}\")\n","\n","n = int(np.sqrt(patches.shape[1]))\n","plt.figure(figsize=(4, 4))\n","for i, patch in enumerate(patches[0]):\n","    ax = plt.subplot(n, n, i + 1)\n","    patch_img = tf.reshape(patch, (patch_size, patch_size, 3))\n","    plt.imshow(patch_img.numpy().astype(\"uint8\"))\n","    plt.axis(\"off\")"]},{"cell_type":"markdown","metadata":{"id":"mrf5S589Pcrg"},"source":["## Implement the patch encoding layer\n","\n","The `PatchEncoder` layer will linearly transform a patch by projecting it into a\n","vector of size `projection_dim`. In addition, it adds a learnable position\n","embedding to the projected vector."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O6yED_VzPcrg"},"outputs":[],"source":["class PatchEncoder(layers.Layer):\n","    def __init__(self, num_patches, projection_dim):\n","        super(PatchEncoder, self).__init__()\n","        self.num_patches = num_patches\n","        self.projection = layers.Dense(units=projection_dim)\n","        self.position_embedding = layers.Embedding(\n","            input_dim=num_patches, output_dim=projection_dim\n","        )\n","\n","    def call(self, patch):\n","        positions = tf.range(start=0, limit=self.num_patches, delta=1)\n","        encoded = self.projection(patch) + self.position_embedding(positions)\n","        return encoded"]},{"cell_type":"markdown","metadata":{"id":"qNpRlLnOPcrg"},"source":["## Build the ViT model\n","\n","The ViT model consists of multiple Transformer blocks,\n","which use the `layers.MultiHeadAttention` layer as a self-attention mechanism\n","applied to the sequence of patches. The Transformer blocks produce a\n","`[batch_size, num_patches, projection_dim]` tensor, which is processed via an\n","classifier head with softmax to produce the final class probabilities output.\n","\n","Unlike the technique described in the [paper](https://arxiv.org/abs/2010.11929),\n","which prepends a learnable embedding to the sequence of encoded patches to serve\n","as the image representation, all the outputs of the final Transformer block are\n","reshaped with `layers.Flatten()` and used as the image\n","representation input to the classifier head.\n","Note that the `layers.GlobalAveragePooling1D` layer\n","could also be used instead to aggregate the outputs of the Transformer block,\n","especially when the number of patches and the projection dimensions are large."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a9N8doCUPcrh"},"outputs":[],"source":["def create_vit_classifier():\n","    inputs = layers.Input(shape=input_shape)\n","    # Augment data.\n","    augmented = data_augmentation(inputs)\n","    # Create patches.\n","    patches = Patches(patch_size)(augmented)\n","    # Encode patches.\n","    encoded_patches = PatchEncoder(num_patches, projection_dim)(patches)\n","\n","    # Create multiple layers of the Transformer block.\n","    for _ in range(transformer_layers):\n","        # Layer normalization 1.\n","        x1 = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n","        # Create a multi-head attention layer.\n","        attention_output = layers.MultiHeadAttention(\n","            num_heads=num_heads, key_dim=projection_dim, dropout=0.1\n","        )(x1, x1)\n","        # Skip connection 1.\n","        x2 = layers.Add()([attention_output, encoded_patches])\n","        # Layer normalization 2.\n","        x3 = layers.LayerNormalization(epsilon=1e-6)(x2)\n","        # MLP.\n","        x3 = mlp(x3, hidden_units=transformer_units, dropout_rate=0.1)\n","        # Skip connection 2.\n","        encoded_patches = layers.Add()([x3, x2])\n","\n","    # Create a [batch_size, projection_dim] tensor.\n","    representation = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n","    representation = layers.Flatten()(representation)\n","    representation = layers.Dropout(0.5)(representation)\n","    # Add MLP.\n","    features = mlp(representation, hidden_units=mlp_head_units, dropout_rate=0.5)\n","    # Classify outputs.\n","    logits = layers.Dense(num_classes)(features)\n","    # Create the Keras model.\n","    model = keras.Model(inputs=inputs, outputs=logits)\n","    return model"]},{"cell_type":"markdown","metadata":{"id":"ykB9hE6xPcrh"},"source":["## Compile, train, and evaluate the mode"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3uetnLXIPcrh","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ec527ad9-b0d5-4622-b046-a6ae6486a0a5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","176/176 [==============================] - 77s 371ms/step - loss: 4.5081 - accuracy: 0.0428 - top-5-accuracy: 0.1495 - val_loss: 3.9177 - val_accuracy: 0.1032 - val_top-5-accuracy: 0.3002\n","Epoch 2/100\n","176/176 [==============================] - 65s 370ms/step - loss: 3.9764 - accuracy: 0.0899 - top-5-accuracy: 0.2799 - val_loss: 3.5901 - val_accuracy: 0.1530 - val_top-5-accuracy: 0.4006\n","Epoch 3/100\n","176/176 [==============================] - 66s 376ms/step - loss: 3.7300 - accuracy: 0.1269 - top-5-accuracy: 0.3564 - val_loss: 3.3981 - val_accuracy: 0.1842 - val_top-5-accuracy: 0.4536\n","Epoch 4/100\n","176/176 [==============================] - 68s 386ms/step - loss: 3.5511 - accuracy: 0.1537 - top-5-accuracy: 0.4088 - val_loss: 3.2360 - val_accuracy: 0.2192 - val_top-5-accuracy: 0.5014\n","Epoch 5/100\n","164/176 [==========================>...] - ETA: 4s - loss: 3.4172 - accuracy: 0.1790 - top-5-accuracy: 0.4468"]}],"source":["def run_experiment(model):\n","    optimizer = tfa.optimizers.AdamW(\n","        learning_rate=learning_rate, weight_decay=weight_decay\n","    )\n","\n","    model.compile(\n","        optimizer=optimizer,\n","        loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","        metrics=[\n","            keras.metrics.SparseCategoricalAccuracy(name=\"accuracy\"),\n","            keras.metrics.SparseTopKCategoricalAccuracy(5, name=\"top-5-accuracy\"),\n","        ],\n","    )\n","\n","    checkpoint_filepath = \"/tmp/checkpoint\"\n","    checkpoint_callback = keras.callbacks.ModelCheckpoint(\n","        checkpoint_filepath,\n","        monitor=\"val_accuracy\",\n","        save_best_only=True,\n","        save_weights_only=True,\n","    )\n","\n","    history = model.fit(\n","        x=x_train,\n","        y=y_train,\n","        batch_size=batch_size,\n","        epochs=num_epochs,\n","        validation_split=0.1,\n","        callbacks=[checkpoint_callback],\n","    )\n","\n","    model.load_weights(checkpoint_filepath)\n","    _, accuracy, top_5_accuracy = model.evaluate(x_test, y_test)\n","    print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")\n","    print(f\"Test top 5 accuracy: {round(top_5_accuracy * 100, 2)}%\")\n","\n","    return history\n","\n","\n","vit_classifier = create_vit_classifier()\n","history = run_experiment(vit_classifier)"]},{"cell_type":"markdown","metadata":{"id":"P2K7kWYcPcri"},"source":["After 100 epochs, the ViT model achieves around 55% accuracy and\n","82% top-5 accuracy on the test data. These are not competitive results on the CIFAR-100 dataset,\n","as a ResNet50V2 trained from scratch on the same data can achieve 67% accuracy.\n","\n","Note that the state of the art results reported in the\n","[paper](https://arxiv.org/abs/2010.11929) are achieved by pre-training the ViT model using\n","the JFT-300M dataset, then fine-tuning it on the target dataset. To improve the model quality\n","without pre-training, you can try to train the model for more epochs, use a larger number of\n","Transformer layers, resize the input images, change the patch size, or increase the projection dimensions. \n","Besides, as mentioned in the paper, the quality of the model is affected not only by architecture choices, \n","but also by parameters such as the learning rate schedule, optimizer, weight decay, etc.\n","In practice, it's recommended to fine-tune a ViT model\n","that was pre-trained using a large, high-resolution dataset."]}],"metadata":{"colab":{"collapsed_sections":[],"name":"61. Vision Transformer Classifier in Keras","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/image_classification_with_vision_transformer.ipynb","timestamp":1644087361651}]},"environment":{"name":"tf2-gpu.2-4.m61","type":"gcloud","uri":"gcr.io/deeplearning-platform-release/tf2-gpu.2-4:m61"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.9"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}