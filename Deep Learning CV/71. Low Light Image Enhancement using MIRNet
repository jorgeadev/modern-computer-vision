{"cells":[{"cell_type":"markdown","metadata":{"id":"f2TT6_RaUWQD"},"source":["![](https://github.com/rajeevratan84/ModernComputerVision/raw/main/logo_MCV_W.png)\n","\n","\n","# **Low-light image enhancement using MIRNet**\n","\n","**Author:** [Soumik Rakshit](http://github.com/soumik12345)<br>\n","**Date created:** 2021/09/11<br>\n","**Last modified:** 2021/09/15<br>\n","**Description:** Implementing the MIRNet architecture for low-light image enhancement."]},{"cell_type":"markdown","metadata":{"id":"2c5PEgURUWQH"},"source":["## Introduction\n","\n","With the goal of recovering high-quality image content from its degraded version, image\n","restoration enjoys numerous applications, such as in\n","photography, security, medical imaging, and remote sensing. In this example, we implement the\n","**MIRNet** model for low-light image enhancement, a fully-convolutional architecture that\n","learns an enriched set of\n","features that combines contextual information from multiple scales, while\n","simultaneously preserving the high-resolution spatial details.\n","\n","### References:\n","\n","- [Learning Enriched Features for Real Image Restoration and Enhancement](https://arxiv.org/abs/2003.06792)\n","- [The Retinex Theory of Color Vision](http://www.cnbc.cmu.edu/~tai/cp_papers/E.Land_Retinex_Theory_ScientifcAmerican.pdf)\n","- [Two deterministic half-quadratic regularization algorithms for computed imaging](https://ieeexplore.ieee.org/document/413553)"]},{"cell_type":"markdown","metadata":{"id":"WNXzCUlFUWQH"},"source":["## Downloading LOLDataset\n","\n","The **LoL Dataset** has been created for low-light image enhancement.\n","It provides 485 images for training and 15 for testing. Each image pair in the dataset\n","consists of a low-light input image and its corresponding well-exposed reference image."]},{"cell_type":"code","execution_count":1,"metadata":{"id":"rLIUCUcEUWQI","executionInfo":{"status":"ok","timestamp":1644178240866,"user_tz":0,"elapsed":4162,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}}},"outputs":[],"source":["import os\n","import cv2\n","import random\n","import numpy as np\n","from glob import glob\n","from PIL import Image, ImageOps\n","import matplotlib.pyplot as plt\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"V5o5TRj_UWQJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644178251419,"user_tz":0,"elapsed":10559,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}},"outputId":"234ba122-a0de-4ffd-b2f2-cff0b48bc614"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading...\n","From: https://drive.google.com/uc?id=1DdGIJ4PZPlF2ikl8mNM9V-PdVxVLbQi6\n","To: /content/lol_dataset.zip\n","100% 347M/347M [00:02<00:00, 120MB/s]\n"]}],"source":["!gdown https://drive.google.com/uc?id=1DdGIJ4PZPlF2ikl8mNM9V-PdVxVLbQi6\n","!unzip -q lol_dataset.zip"]},{"cell_type":"markdown","metadata":{"id":"LQIvP4QFUWQK"},"source":["## Creating a TensorFlow Dataset\n","\n","We use 300 image pairs from the LoL Dataset's training set for training,\n","and we use the remaining 185 image pairs for validation.\n","We generate random crops of size `128 x 128` from the image pairs to be\n","used for both training and validation."]},{"cell_type":"code","execution_count":3,"metadata":{"id":"s6BcZR0SUWQK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644178255125,"user_tz":0,"elapsed":3716,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}},"outputId":"8d2914a5-42be-4647-ce7a-0a8d391a5657"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train Dataset: <BatchDataset shapes: ((4, None, None, 3), (4, None, None, 3)), types: (tf.float32, tf.float32)>\n","Val Dataset: <BatchDataset shapes: ((4, None, None, 3), (4, None, None, 3)), types: (tf.float32, tf.float32)>\n"]}],"source":["random.seed(10)\n","\n","IMAGE_SIZE = 128\n","BATCH_SIZE = 4\n","MAX_TRAIN_IMAGES = 300\n","\n","\n","def read_image(image_path):\n","    image = tf.io.read_file(image_path)\n","    image = tf.image.decode_png(image, channels=3)\n","    image.set_shape([None, None, 3])\n","    image = tf.cast(image, dtype=tf.float32) / 255.0\n","    return image\n","\n","\n","def random_crop(low_image, enhanced_image):\n","    low_image_shape = tf.shape(low_image)[:2]\n","    low_w = tf.random.uniform(\n","        shape=(), maxval=low_image_shape[1] - IMAGE_SIZE + 1, dtype=tf.int32\n","    )\n","    low_h = tf.random.uniform(\n","        shape=(), maxval=low_image_shape[0] - IMAGE_SIZE + 1, dtype=tf.int32\n","    )\n","    enhanced_w = low_w\n","    enhanced_h = low_h\n","    low_image_cropped = low_image[\n","        low_h : low_h + IMAGE_SIZE, low_w : low_w + IMAGE_SIZE\n","    ]\n","    enhanced_image_cropped = enhanced_image[\n","        enhanced_h : enhanced_h + IMAGE_SIZE, enhanced_w : enhanced_w + IMAGE_SIZE\n","    ]\n","    return low_image_cropped, enhanced_image_cropped\n","\n","\n","def load_data(low_light_image_path, enhanced_image_path):\n","    low_light_image = read_image(low_light_image_path)\n","    enhanced_image = read_image(enhanced_image_path)\n","    low_light_image, enhanced_image = random_crop(low_light_image, enhanced_image)\n","    return low_light_image, enhanced_image\n","\n","\n","def get_dataset(low_light_images, enhanced_images):\n","    dataset = tf.data.Dataset.from_tensor_slices((low_light_images, enhanced_images))\n","    dataset = dataset.map(load_data, num_parallel_calls=tf.data.AUTOTUNE)\n","    dataset = dataset.batch(BATCH_SIZE, drop_remainder=True)\n","    return dataset\n","\n","\n","train_low_light_images = sorted(glob(\"./lol_dataset/our485/low/*\"))[:MAX_TRAIN_IMAGES]\n","train_enhanced_images = sorted(glob(\"./lol_dataset/our485/high/*\"))[:MAX_TRAIN_IMAGES]\n","\n","val_low_light_images = sorted(glob(\"./lol_dataset/our485/low/*\"))[MAX_TRAIN_IMAGES:]\n","val_enhanced_images = sorted(glob(\"./lol_dataset/our485/high/*\"))[MAX_TRAIN_IMAGES:]\n","\n","test_low_light_images = sorted(glob(\"./lol_dataset/eval15/low/*\"))\n","test_enhanced_images = sorted(glob(\"./lol_dataset/eval15/high/*\"))\n","\n","\n","train_dataset = get_dataset(train_low_light_images, train_enhanced_images)\n","val_dataset = get_dataset(val_low_light_images, val_enhanced_images)\n","\n","\n","print(\"Train Dataset:\", train_dataset)\n","print(\"Val Dataset:\", val_dataset)"]},{"cell_type":"markdown","metadata":{"id":"xfUgr54lUWQM"},"source":["## MIRNet Model\n","\n","Here are the main features of the MIRNet model:\n","\n","- A feature extraction model that computes a complementary set of features across multiple\n","spatial scales, while maintaining the original high-resolution features to preserve\n","precise spatial details.\n","- A regularly repeated mechanism for information exchange, where the features across\n","multi-resolution branches are progressively fused together for improved representation\n","learning.\n","- A new approach to fuse multi-scale features using a selective kernel network\n","that dynamically combines variable receptive fields and faithfully preserves\n","the original feature information at each spatial resolution.\n","- A recursive residual design that progressively breaks down the input signal\n","in order to simplify the overall learning process, and allows the construction\n","of very deep networks.\n","\n","\n","![](https://raw.githubusercontent.com/soumik12345/MIRNet/master/assets/mirnet_architecture.png)"]},{"cell_type":"markdown","metadata":{"id":"4uU-MCBsUWQM"},"source":["### Selective Kernel Feature Fusion\n","\n","The Selective Kernel Feature Fusion or SKFF module performs dynamic adjustment of\n","receptive fields via two operations: **Fuse** and **Select**. The Fuse operator generates\n","global feature descriptors by combining the information from multi-resolution streams.\n","The Select operator uses these descriptors to recalibrate the feature maps (of different\n","streams) followed by their aggregation.\n","\n","**Fuse**: The SKFF receives inputs from three parallel convolution streams carrying\n","different scales of information. We first combine these multi-scale features using an\n","element-wise sum, on which we apply Global Average Pooling (GAP) across the spatial\n","dimension. Next, we apply a channel- downscaling convolution layer to generate a compact\n","feature representation which passes through three parallel channel-upscaling convolution\n","layers (one for each resolution stream) and provides us with three feature descriptors.\n","\n","**Select**: This operator applies the softmax function to the feature descriptors to\n","obtain the corresponding activations that are used to adaptively recalibrate multi-scale\n","feature maps. The aggregated features are defined as the sum of product of the corresponding\n","multi-scale feature and the feature descriptor.\n","\n","![](https://i.imgur.com/7U6ixF6.png)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"BpvL2mkuUWQN","executionInfo":{"status":"ok","timestamp":1644178255126,"user_tz":0,"elapsed":12,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}}},"outputs":[],"source":["def selective_kernel_feature_fusion(\n","    multi_scale_feature_1, multi_scale_feature_2, multi_scale_feature_3\n","):\n","    channels = list(multi_scale_feature_1.shape)[-1]\n","    combined_feature = layers.Add()(\n","        [multi_scale_feature_1, multi_scale_feature_2, multi_scale_feature_3]\n","    )\n","    gap = layers.GlobalAveragePooling2D()(combined_feature)\n","    channel_wise_statistics = tf.reshape(gap, shape=(-1, 1, 1, channels))\n","    compact_feature_representation = layers.Conv2D(\n","        filters=channels // 8, kernel_size=(1, 1), activation=\"relu\"\n","    )(channel_wise_statistics)\n","    feature_descriptor_1 = layers.Conv2D(\n","        channels, kernel_size=(1, 1), activation=\"softmax\"\n","    )(compact_feature_representation)\n","    feature_descriptor_2 = layers.Conv2D(\n","        channels, kernel_size=(1, 1), activation=\"softmax\"\n","    )(compact_feature_representation)\n","    feature_descriptor_3 = layers.Conv2D(\n","        channels, kernel_size=(1, 1), activation=\"softmax\"\n","    )(compact_feature_representation)\n","    feature_1 = multi_scale_feature_1 * feature_descriptor_1\n","    feature_2 = multi_scale_feature_2 * feature_descriptor_2\n","    feature_3 = multi_scale_feature_3 * feature_descriptor_3\n","    aggregated_feature = layers.Add()([feature_1, feature_2, feature_3])\n","    return aggregated_feature\n"]},{"cell_type":"markdown","metadata":{"id":"ufDD53vcUWQN"},"source":["### Dual Attention Unit\n","\n","The Dual Attention Unit or DAU is used to extract features in the convolutional streams.\n","While the SKFF block fuses information across multi-resolution branches, we also need a\n","mechanism to share information within a feature tensor, both along the spatial and the\n","channel dimensions which is done by the DAU block. The DAU suppresses less useful\n","features and only allows more informative ones to pass further. This feature\n","recalibration is achieved by using **Channel Attention** and **Spatial Attention**\n","mechanisms.\n","\n","The **Channel Attention** branch exploits the inter-channel relationships of the\n","convolutional feature maps by applying squeeze and excitation operations. Given a feature\n","map, the squeeze operation applies Global Average Pooling across spatial dimensions to\n","encode global context, thus yielding a feature descriptor. The excitation operator passes\n","this feature descriptor through two convolutional layers followed by the sigmoid gating\n","and generates activations. Finally, the output of Channel Attention branch is obtained by\n","rescaling the input feature map with the output activations.\n","\n","The **Spatial Attention** branch is designed to exploit the inter-spatial dependencies of\n","convolutional features. The goal of Spatial Attention is to generate a spatial attention\n","map and use it to recalibrate the incoming features. To generate the spatial attention\n","map, the Spatial Attention branch first independently applies Global Average Pooling and\n","Max Pooling operations on input features along the channel dimensions and concatenates\n","the outputs to form a resultant feature map which is then passed through a convolution\n","and sigmoid activation to obtain the spatial attention map. This spatial attention map is\n","then used to rescale the input feature map.\n","\n","![](https://i.imgur.com/Dl0IwQs.png)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"jcrNHrA0UWQO","executionInfo":{"status":"ok","timestamp":1644178255126,"user_tz":0,"elapsed":11,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}}},"outputs":[],"source":["def spatial_attention_block(input_tensor):\n","    average_pooling = tf.reduce_max(input_tensor, axis=-1)\n","    average_pooling = tf.expand_dims(average_pooling, axis=-1)\n","    max_pooling = tf.reduce_mean(input_tensor, axis=-1)\n","    max_pooling = tf.expand_dims(max_pooling, axis=-1)\n","    concatenated = layers.Concatenate(axis=-1)([average_pooling, max_pooling])\n","    feature_map = layers.Conv2D(1, kernel_size=(1, 1))(concatenated)\n","    feature_map = tf.nn.sigmoid(feature_map)\n","    return input_tensor * feature_map\n","\n","\n","def channel_attention_block(input_tensor):\n","    channels = list(input_tensor.shape)[-1]\n","    average_pooling = layers.GlobalAveragePooling2D()(input_tensor)\n","    feature_descriptor = tf.reshape(average_pooling, shape=(-1, 1, 1, channels))\n","    feature_activations = layers.Conv2D(\n","        filters=channels // 8, kernel_size=(1, 1), activation=\"relu\"\n","    )(feature_descriptor)\n","    feature_activations = layers.Conv2D(\n","        filters=channels, kernel_size=(1, 1), activation=\"sigmoid\"\n","    )(feature_activations)\n","    return input_tensor * feature_activations\n","\n","\n","def dual_attention_unit_block(input_tensor):\n","    channels = list(input_tensor.shape)[-1]\n","    feature_map = layers.Conv2D(\n","        channels, kernel_size=(3, 3), padding=\"same\", activation=\"relu\"\n","    )(input_tensor)\n","    feature_map = layers.Conv2D(channels, kernel_size=(3, 3), padding=\"same\")(\n","        feature_map\n","    )\n","    channel_attention = channel_attention_block(feature_map)\n","    spatial_attention = spatial_attention_block(feature_map)\n","    concatenation = layers.Concatenate(axis=-1)([channel_attention, spatial_attention])\n","    concatenation = layers.Conv2D(channels, kernel_size=(1, 1))(concatenation)\n","    return layers.Add()([input_tensor, concatenation])\n"]},{"cell_type":"markdown","metadata":{"id":"iy8w7EdmUWQO"},"source":["### Multi-Scale Residual Block\n","\n","The Multi-Scale Residual Block is capable of generating a spatially-precise output by\n","maintaining high-resolution representations, while receiving rich contextual information\n","from low-resolutions. The MRB consists of multiple (three in this paper)\n","fully-convolutional streams connected in parallel. It allows information exchange across\n","parallel streams in order to consolidate the high-resolution features with the help of\n","low-resolution features, and vice versa. The MIRNet employs a recursive residual design\n","(with skip connections) to ease the flow of information during the learning process. In\n","order to maintain the residual nature of our architecture, residual resizing modules are\n","used to perform downsampling and upsampling operations that are used in the Multi-scale\n","Residual Block.\n","\n","![](https://i.imgur.com/wzZKV57.png)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"eooqh_kCUWQP","executionInfo":{"status":"ok","timestamp":1644178255730,"user_tz":0,"elapsed":615,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}}},"outputs":[],"source":["# Recursive Residual Modules\n","\n","def down_sampling_module(input_tensor):\n","    channels = list(input_tensor.shape)[-1]\n","    main_branch = layers.Conv2D(channels, kernel_size=(1, 1), activation=\"relu\")(\n","        input_tensor\n","    )\n","    main_branch = layers.Conv2D(\n","        channels, kernel_size=(3, 3), padding=\"same\", activation=\"relu\"\n","    )(main_branch)\n","    main_branch = layers.MaxPooling2D()(main_branch)\n","    main_branch = layers.Conv2D(channels * 2, kernel_size=(1, 1))(main_branch)\n","    skip_branch = layers.MaxPooling2D()(input_tensor)\n","    skip_branch = layers.Conv2D(channels * 2, kernel_size=(1, 1))(skip_branch)\n","    return layers.Add()([skip_branch, main_branch])\n","\n","\n","def up_sampling_module(input_tensor):\n","    channels = list(input_tensor.shape)[-1]\n","    main_branch = layers.Conv2D(channels, kernel_size=(1, 1), activation=\"relu\")(\n","        input_tensor\n","    )\n","    main_branch = layers.Conv2D(\n","        channels, kernel_size=(3, 3), padding=\"same\", activation=\"relu\"\n","    )(main_branch)\n","    main_branch = layers.UpSampling2D()(main_branch)\n","    main_branch = layers.Conv2D(channels // 2, kernel_size=(1, 1))(main_branch)\n","    skip_branch = layers.UpSampling2D()(input_tensor)\n","    skip_branch = layers.Conv2D(channels // 2, kernel_size=(1, 1))(skip_branch)\n","    return layers.Add()([skip_branch, main_branch])\n","\n","\n","# MRB Block\n","def multi_scale_residual_block(input_tensor, channels):\n","    # features\n","    level1 = input_tensor\n","    level2 = down_sampling_module(input_tensor)\n","    level3 = down_sampling_module(level2)\n","    # DAU\n","    level1_dau = dual_attention_unit_block(level1)\n","    level2_dau = dual_attention_unit_block(level2)\n","    level3_dau = dual_attention_unit_block(level3)\n","    # SKFF\n","    level1_skff = selective_kernel_feature_fusion(\n","        level1_dau,\n","        up_sampling_module(level2_dau),\n","        up_sampling_module(up_sampling_module(level3_dau)),\n","    )\n","    level2_skff = selective_kernel_feature_fusion(\n","        down_sampling_module(level1_dau), level2_dau, up_sampling_module(level3_dau)\n","    )\n","    level3_skff = selective_kernel_feature_fusion(\n","        down_sampling_module(down_sampling_module(level1_dau)),\n","        down_sampling_module(level2_dau),\n","        level3_dau,\n","    )\n","    # DAU 2\n","    level1_dau_2 = dual_attention_unit_block(level1_skff)\n","    level2_dau_2 = up_sampling_module((dual_attention_unit_block(level2_skff)))\n","    level3_dau_2 = up_sampling_module(\n","        up_sampling_module(dual_attention_unit_block(level3_skff))\n","    )\n","    # SKFF 2\n","    skff_ = selective_kernel_feature_fusion(level1_dau_2, level3_dau_2, level3_dau_2)\n","    conv = layers.Conv2D(channels, kernel_size=(3, 3), padding=\"same\")(skff_)\n","    return layers.Add()([input_tensor, conv])\n"]},{"cell_type":"markdown","metadata":{"id":"xwIsYDX-UWQP"},"source":["### MIRNet Model"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"T64r_A2QUWQQ","executionInfo":{"status":"ok","timestamp":1644178266040,"user_tz":0,"elapsed":10313,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}}},"outputs":[],"source":["def recursive_residual_group(input_tensor, num_mrb, channels):\n","    conv1 = layers.Conv2D(channels, kernel_size=(3, 3), padding=\"same\")(input_tensor)\n","    for _ in range(num_mrb):\n","        conv1 = multi_scale_residual_block(conv1, channels)\n","    conv2 = layers.Conv2D(channels, kernel_size=(3, 3), padding=\"same\")(conv1)\n","    return layers.Add()([conv2, input_tensor])\n","\n","\n","def mirnet_model(num_rrg, num_mrb, channels):\n","    input_tensor = keras.Input(shape=[None, None, 3])\n","    x1 = layers.Conv2D(channels, kernel_size=(3, 3), padding=\"same\")(input_tensor)\n","    for _ in range(num_rrg):\n","        x1 = recursive_residual_group(x1, num_mrb, channels)\n","    conv = layers.Conv2D(3, kernel_size=(3, 3), padding=\"same\")(x1)\n","    output_tensor = layers.Add()([input_tensor, conv])\n","    return keras.Model(input_tensor, output_tensor)\n","\n","\n","model = mirnet_model(num_rrg=3, num_mrb=2, channels=64)"]},{"cell_type":"markdown","metadata":{"id":"6BY9Z5cgUWQQ"},"source":["## Training\n","\n","- We train MIRNet using **Charbonnier Loss** as the loss function and **Adam\n","Optimizer** with a learning rate of `1e-4`.\n","- We use **Peak Signal Noise Ratio** or PSNR as a metric which is an expression for the\n","ratio between the maximum possible value (power) of a signal and the power of distorting\n","noise that affects the quality of its representation."]},{"cell_type":"code","execution_count":8,"metadata":{"id":"q93qmaqyUWQQ","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1644182160172,"user_tz":0,"elapsed":3894137,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}},"outputId":"a023b22f-6695-4758-e6d6-4879fa665083"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","75/75 [==============================] - 102s 762ms/step - loss: 0.2071 - peak_signal_noise_ratio: 62.1682 - val_loss: 0.1475 - val_peak_signal_noise_ratio: 64.4972 - lr: 1.0000e-04\n","Epoch 2/50\n","75/75 [==============================] - 51s 679ms/step - loss: 0.1783 - peak_signal_noise_ratio: 62.9845 - val_loss: 0.1285 - val_peak_signal_noise_ratio: 65.6822 - lr: 1.0000e-04\n","Epoch 3/50\n","75/75 [==============================] - 53s 712ms/step - loss: 0.1717 - peak_signal_noise_ratio: 63.4334 - val_loss: 0.1224 - val_peak_signal_noise_ratio: 65.7858 - lr: 1.0000e-04\n","Epoch 4/50\n","75/75 [==============================] - 53s 713ms/step - loss: 0.1640 - peak_signal_noise_ratio: 63.8502 - val_loss: 0.1236 - val_peak_signal_noise_ratio: 65.8342 - lr: 1.0000e-04\n","Epoch 5/50\n","75/75 [==============================] - 51s 680ms/step - loss: 0.1598 - peak_signal_noise_ratio: 63.9986 - val_loss: 0.1242 - val_peak_signal_noise_ratio: 65.9993 - lr: 1.0000e-04\n","Epoch 6/50\n","75/75 [==============================] - 53s 713ms/step - loss: 0.1689 - peak_signal_noise_ratio: 63.6803 - val_loss: 0.1390 - val_peak_signal_noise_ratio: 65.4481 - lr: 1.0000e-04\n","Epoch 7/50\n","75/75 [==============================] - 51s 678ms/step - loss: 0.1651 - peak_signal_noise_ratio: 63.8165 - val_loss: 0.1210 - val_peak_signal_noise_ratio: 66.0074 - lr: 1.0000e-04\n","Epoch 8/50\n","75/75 [==============================] - 51s 675ms/step - loss: 0.1496 - peak_signal_noise_ratio: 64.5111 - val_loss: 0.1268 - val_peak_signal_noise_ratio: 66.6737 - lr: 1.0000e-04\n","Epoch 9/50\n","75/75 [==============================] - 51s 678ms/step - loss: 0.1698 - peak_signal_noise_ratio: 63.5129 - val_loss: 0.1172 - val_peak_signal_noise_ratio: 66.3718 - lr: 1.0000e-04\n","Epoch 10/50\n","75/75 [==============================] - 53s 712ms/step - loss: 0.1522 - peak_signal_noise_ratio: 64.5036 - val_loss: 0.1123 - val_peak_signal_noise_ratio: 66.5941 - lr: 1.0000e-04\n","Epoch 11/50\n","75/75 [==============================] - 51s 677ms/step - loss: 0.1552 - peak_signal_noise_ratio: 64.4309 - val_loss: 0.1091 - val_peak_signal_noise_ratio: 66.9805 - lr: 1.0000e-04\n","Epoch 12/50\n","75/75 [==============================] - 51s 679ms/step - loss: 0.1404 - peak_signal_noise_ratio: 65.2094 - val_loss: 0.1164 - val_peak_signal_noise_ratio: 66.9474 - lr: 1.0000e-04\n","Epoch 13/50\n","75/75 [==============================] - 53s 713ms/step - loss: 0.1326 - peak_signal_noise_ratio: 65.6549 - val_loss: 0.1159 - val_peak_signal_noise_ratio: 67.0266 - lr: 1.0000e-04\n","Epoch 14/50\n","75/75 [==============================] - 51s 677ms/step - loss: 0.1429 - peak_signal_noise_ratio: 65.0131 - val_loss: 0.1172 - val_peak_signal_noise_ratio: 66.7955 - lr: 1.0000e-04\n","Epoch 15/50\n","75/75 [==============================] - 51s 679ms/step - loss: 0.1374 - peak_signal_noise_ratio: 65.4119 - val_loss: 0.1117 - val_peak_signal_noise_ratio: 67.0538 - lr: 1.0000e-04\n","Epoch 16/50\n","75/75 [==============================] - 51s 677ms/step - loss: 0.1439 - peak_signal_noise_ratio: 65.1782 - val_loss: 0.1102 - val_peak_signal_noise_ratio: 67.4148 - lr: 1.0000e-04\n","Epoch 17/50\n","75/75 [==============================] - 51s 678ms/step - loss: 0.1388 - peak_signal_noise_ratio: 65.2484 - val_loss: 0.1073 - val_peak_signal_noise_ratio: 67.5278 - lr: 1.0000e-04\n","Epoch 18/50\n","75/75 [==============================] - 51s 678ms/step - loss: 0.1350 - peak_signal_noise_ratio: 65.6732 - val_loss: 0.1131 - val_peak_signal_noise_ratio: 67.2099 - lr: 1.0000e-04\n","Epoch 19/50\n","75/75 [==============================] - 51s 676ms/step - loss: 0.1390 - peak_signal_noise_ratio: 65.4061 - val_loss: 0.1141 - val_peak_signal_noise_ratio: 67.2906 - lr: 1.0000e-04\n","Epoch 20/50\n","75/75 [==============================] - 51s 675ms/step - loss: 0.1339 - peak_signal_noise_ratio: 65.7060 - val_loss: 0.1101 - val_peak_signal_noise_ratio: 67.5145 - lr: 1.0000e-04\n","Epoch 21/50\n","75/75 [==============================] - 51s 675ms/step - loss: 0.1280 - peak_signal_noise_ratio: 66.2110 - val_loss: 0.1056 - val_peak_signal_noise_ratio: 67.5541 - lr: 1.0000e-04\n","Epoch 22/50\n","75/75 [==============================] - 53s 711ms/step - loss: 0.1341 - peak_signal_noise_ratio: 65.7307 - val_loss: 0.1103 - val_peak_signal_noise_ratio: 67.4253 - lr: 1.0000e-04\n","Epoch 23/50\n","75/75 [==============================] - 51s 675ms/step - loss: 0.1347 - peak_signal_noise_ratio: 65.7154 - val_loss: 0.1167 - val_peak_signal_noise_ratio: 67.2607 - lr: 1.0000e-04\n","Epoch 24/50\n","75/75 [==============================] - 53s 712ms/step - loss: 0.1297 - peak_signal_noise_ratio: 66.0944 - val_loss: 0.1114 - val_peak_signal_noise_ratio: 67.3590 - lr: 1.0000e-04\n","Epoch 25/50\n","75/75 [==============================] - 51s 674ms/step - loss: 0.1403 - peak_signal_noise_ratio: 65.8356 - val_loss: 0.1062 - val_peak_signal_noise_ratio: 67.4751 - lr: 1.0000e-04\n","Epoch 26/50\n","75/75 [==============================] - ETA: 0s - loss: 0.1429 - peak_signal_noise_ratio: 65.3068\n","Epoch 00026: ReduceLROnPlateau reducing learning rate to 4.999999873689376e-05.\n","75/75 [==============================] - 51s 677ms/step - loss: 0.1429 - peak_signal_noise_ratio: 65.3068 - val_loss: 0.1264 - val_peak_signal_noise_ratio: 66.5439 - lr: 1.0000e-04\n","Epoch 27/50\n","75/75 [==============================] - 56s 746ms/step - loss: 0.1385 - peak_signal_noise_ratio: 65.6646 - val_loss: 0.0999 - val_peak_signal_noise_ratio: 67.9264 - lr: 5.0000e-05\n","Epoch 28/50\n","75/75 [==============================] - 50s 674ms/step - loss: 0.1276 - peak_signal_noise_ratio: 66.1666 - val_loss: 0.1178 - val_peak_signal_noise_ratio: 66.3489 - lr: 5.0000e-05\n","Epoch 29/50\n","75/75 [==============================] - 51s 676ms/step - loss: 0.1259 - peak_signal_noise_ratio: 66.2576 - val_loss: 0.1120 - val_peak_signal_noise_ratio: 67.1749 - lr: 5.0000e-05\n","Epoch 30/50\n","75/75 [==============================] - 51s 677ms/step - loss: 0.1237 - peak_signal_noise_ratio: 66.4482 - val_loss: 0.1070 - val_peak_signal_noise_ratio: 67.4817 - lr: 5.0000e-05\n","Epoch 31/50\n","75/75 [==============================] - 51s 677ms/step - loss: 0.1200 - peak_signal_noise_ratio: 66.7943 - val_loss: 0.1066 - val_peak_signal_noise_ratio: 67.1694 - lr: 5.0000e-05\n","Epoch 32/50\n","75/75 [==============================] - ETA: 0s - loss: 0.1217 - peak_signal_noise_ratio: 66.4316\n","Epoch 00032: ReduceLROnPlateau reducing learning rate to 2.499999936844688e-05.\n","75/75 [==============================] - 50s 673ms/step - loss: 0.1217 - peak_signal_noise_ratio: 66.4316 - val_loss: 0.1054 - val_peak_signal_noise_ratio: 67.4211 - lr: 5.0000e-05\n","Epoch 33/50\n","75/75 [==============================] - 53s 710ms/step - loss: 0.1260 - peak_signal_noise_ratio: 66.3329 - val_loss: 0.1016 - val_peak_signal_noise_ratio: 67.9852 - lr: 2.5000e-05\n","Epoch 34/50\n","75/75 [==============================] - 51s 676ms/step - loss: 0.1131 - peak_signal_noise_ratio: 67.1058 - val_loss: 0.1096 - val_peak_signal_noise_ratio: 67.0500 - lr: 2.5000e-05\n","Epoch 35/50\n","75/75 [==============================] - 51s 675ms/step - loss: 0.1143 - peak_signal_noise_ratio: 67.0142 - val_loss: 0.0998 - val_peak_signal_noise_ratio: 67.8262 - lr: 2.5000e-05\n","Epoch 36/50\n","75/75 [==============================] - 53s 711ms/step - loss: 0.1194 - peak_signal_noise_ratio: 66.7953 - val_loss: 0.1076 - val_peak_signal_noise_ratio: 67.2916 - lr: 2.5000e-05\n","Epoch 37/50\n","75/75 [==============================] - 51s 676ms/step - loss: 0.1178 - peak_signal_noise_ratio: 66.8775 - val_loss: 0.1069 - val_peak_signal_noise_ratio: 67.4130 - lr: 2.5000e-05\n","Epoch 38/50\n","75/75 [==============================] - ETA: 0s - loss: 0.1152 - peak_signal_noise_ratio: 67.1081\n","Epoch 00038: ReduceLROnPlateau reducing learning rate to 1.249999968422344e-05.\n","75/75 [==============================] - 54s 715ms/step - loss: 0.1152 - peak_signal_noise_ratio: 67.1081 - val_loss: 0.1067 - val_peak_signal_noise_ratio: 67.4559 - lr: 2.5000e-05\n","Epoch 39/50\n","75/75 [==============================] - 51s 677ms/step - loss: 0.1113 - peak_signal_noise_ratio: 67.2357 - val_loss: 0.1149 - val_peak_signal_noise_ratio: 67.0277 - lr: 1.2500e-05\n","Epoch 40/50\n","75/75 [==============================] - 53s 712ms/step - loss: 0.1079 - peak_signal_noise_ratio: 67.4331 - val_loss: 0.1086 - val_peak_signal_noise_ratio: 67.3892 - lr: 1.2500e-05\n","Epoch 41/50\n","75/75 [==============================] - 51s 675ms/step - loss: 0.1092 - peak_signal_noise_ratio: 67.2283 - val_loss: 0.1064 - val_peak_signal_noise_ratio: 67.5957 - lr: 1.2500e-05\n","Epoch 42/50\n","75/75 [==============================] - 51s 676ms/step - loss: 0.1132 - peak_signal_noise_ratio: 67.1040 - val_loss: 0.1061 - val_peak_signal_noise_ratio: 67.5490 - lr: 1.2500e-05\n","Epoch 43/50\n","75/75 [==============================] - ETA: 0s - loss: 0.1051 - peak_signal_noise_ratio: 67.7685\n","Epoch 00043: ReduceLROnPlateau reducing learning rate to 6.24999984211172e-06.\n","75/75 [==============================] - 51s 676ms/step - loss: 0.1051 - peak_signal_noise_ratio: 67.7685 - val_loss: 0.1103 - val_peak_signal_noise_ratio: 67.2842 - lr: 1.2500e-05\n","Epoch 44/50\n","75/75 [==============================] - 51s 675ms/step - loss: 0.1108 - peak_signal_noise_ratio: 67.2719 - val_loss: 0.1075 - val_peak_signal_noise_ratio: 67.5207 - lr: 6.2500e-06\n","Epoch 45/50\n","75/75 [==============================] - 51s 675ms/step - loss: 0.1076 - peak_signal_noise_ratio: 67.4818 - val_loss: 0.1061 - val_peak_signal_noise_ratio: 67.5926 - lr: 6.2500e-06\n","Epoch 46/50\n","75/75 [==============================] - 51s 678ms/step - loss: 0.1045 - peak_signal_noise_ratio: 67.7430 - val_loss: 0.1114 - val_peak_signal_noise_ratio: 67.0966 - lr: 6.2500e-06\n","Epoch 47/50\n","75/75 [==============================] - 51s 677ms/step - loss: 0.1085 - peak_signal_noise_ratio: 67.4784 - val_loss: 0.1105 - val_peak_signal_noise_ratio: 67.4690 - lr: 6.2500e-06\n","Epoch 48/50\n","75/75 [==============================] - ETA: 0s - loss: 0.1077 - peak_signal_noise_ratio: 67.5509\n","Epoch 00048: ReduceLROnPlateau reducing learning rate to 3.12499992105586e-06.\n","75/75 [==============================] - 51s 678ms/step - loss: 0.1077 - peak_signal_noise_ratio: 67.5509 - val_loss: 0.1122 - val_peak_signal_noise_ratio: 67.1568 - lr: 6.2500e-06\n","Epoch 49/50\n","75/75 [==============================] - 51s 676ms/step - loss: 0.1067 - peak_signal_noise_ratio: 67.7224 - val_loss: 0.1076 - val_peak_signal_noise_ratio: 67.7572 - lr: 3.1250e-06\n","Epoch 50/50\n","75/75 [==============================] - 51s 678ms/step - loss: 0.1069 - peak_signal_noise_ratio: 67.6408 - val_loss: 0.1096 - val_peak_signal_noise_ratio: 67.5266 - lr: 3.1250e-06\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["def charbonnier_loss(y_true, y_pred):\n","    return tf.reduce_mean(tf.sqrt(tf.square(y_true - y_pred) + tf.square(1e-3)))\n","\n","\n","def peak_signal_noise_ratio(y_true, y_pred):\n","    return tf.image.psnr(y_pred, y_true, max_val=255.0)\n","\n","\n","optimizer = keras.optimizers.Adam(learning_rate=1e-4)\n","model.compile(\n","    optimizer=optimizer, loss=charbonnier_loss, metrics=[peak_signal_noise_ratio]\n",")\n","\n","history = model.fit(\n","    train_dataset,\n","    validation_data=val_dataset,\n","    epochs=50,\n","    callbacks=[\n","        keras.callbacks.ReduceLROnPlateau(\n","            monitor=\"val_peak_signal_noise_ratio\",\n","            factor=0.5,\n","            patience=5,\n","            verbose=1,\n","            min_delta=1e-7,\n","            mode=\"max\",\n","        )\n","    ],\n",")\n","\n","plt.plot(history.history[\"loss\"], label=\"train_loss\")\n","plt.plot(history.history[\"val_loss\"], label=\"val_loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.title(\"Train and Validation Losses Over Epochs\", fontsize=14)\n","plt.legend()\n","plt.grid()\n","plt.show()\n","\n","\n","plt.plot(history.history[\"peak_signal_noise_ratio\"], label=\"train_psnr\")\n","plt.plot(history.history[\"val_peak_signal_noise_ratio\"], label=\"val_psnr\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"PSNR\")\n","plt.title(\"Train and Validation PSNR Over Epochs\", fontsize=14)\n","plt.legend()\n","plt.grid()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"h5_ZBdwhUWQQ"},"source":["## Inference"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"6kYKKiygUWQR","executionInfo":{"status":"ok","timestamp":1644182160177,"user_tz":0,"elapsed":61,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}}},"outputs":[],"source":["def plot_results(images, titles, figure_size=(12, 12)):\n","    fig = plt.figure(figsize=figure_size)\n","    for i in range(len(images)):\n","        fig.add_subplot(1, len(images), i + 1).set_title(titles[i])\n","        _ = plt.imshow(images[i])\n","        plt.axis(\"off\")\n","    plt.show()\n","\n","\n","def infer(original_image):\n","    image = keras.preprocessing.image.img_to_array(original_image)\n","    image = image.astype(\"float32\") / 255.0\n","    image = np.expand_dims(image, axis=0)\n","    output = model.predict(image)\n","    output_image = output[0] * 255.0\n","    output_image = output_image.clip(0, 255)\n","    output_image = output_image.reshape(\n","        (np.shape(output_image)[0], np.shape(output_image)[1], 3)\n","    )\n","    output_image = Image.fromarray(np.uint8(output_image))\n","    original_image = Image.fromarray(np.uint8(original_image))\n","    return output_image\n"]},{"cell_type":"markdown","metadata":{"id":"yRnEbsdiUWQR"},"source":["### Inference on Test Images\n","\n","We compare the test images from LOLDataset enhanced by MIRNet with images\n","enhanced via the `PIL.ImageOps.autocontrast()` function."]},{"cell_type":"code","execution_count":10,"metadata":{"id":"-GMNSN_BUWQR","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Lohrg7dSstgGLW-UiZn3R0oSNQDhLuAD"},"executionInfo":{"status":"ok","timestamp":1644182170958,"user_tz":0,"elapsed":10839,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}},"outputId":"e326f78b-d912-41a3-c438-6d188a612c1f"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["for low_light_image in random.sample(test_low_light_images, 6):\n","    original_image = Image.open(low_light_image)\n","    enhanced_image = infer(original_image)\n","    plot_results(\n","        [original_image, ImageOps.autocontrast(original_image), enhanced_image],\n","        [\"Original\", \"PIL Autocontrast\", \"MIRNet Enhanced\"],\n","        (20, 12),\n","    )"]},{"cell_type":"code","source":["while True:\n","  pass"],"metadata":{"id":"3Dt5GGDDyBft","executionInfo":{"status":"ok","timestamp":1644264085487,"user_tz":0,"elapsed":402,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"}}},"execution_count":12,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"name":"71. Low Light Image Enhancement using MIRNet","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/mirnet.ipynb","timestamp":1639340923285}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}