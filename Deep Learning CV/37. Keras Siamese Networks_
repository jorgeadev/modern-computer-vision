{"cells":[{"cell_type":"markdown","metadata":{"id":"Yyq7urGLFxA0"},"source":["\n","\n","![](https://github.com/rajeevratan84/ModernComputerVision/raw/main/logo_MCV_W.png)\n","\n","# **Keras - Image similarity estimation using a Siamese Network**\n","\n","---\n","\n","\n","In this lesson, we will implement **Image similarity estimation using a Siamese Network with a contrastive loss** using Tensorflow and Keras.\n","\n","1. Setup - Load Data and Set Parameters\n","2. Create pairs of images\n","3. Define the model\n","4. Define the Constrastive Loss and Train\n","5. Visualize results\n","\n","**Tutorial Inspiration and Credit:**\n","\n","https://keras.io/examples/vision/siamese_contrastive/\n","\n","**Author:** Mehdi\u003cbr\u003e\n","**Date created:** 2021/05/06\u003cbr\u003e\n","**Last modified:** 2021/05/06\u003cbr\u003e\n","**Description:** Similarity learning using a siamese network trained with a contrastive loss."]},{"cell_type":"markdown","metadata":{"id":"__sQzTruFxA4"},"source":["## **Introduction**\n","\n","[Siamese Networks](https://en.wikipedia.org/wiki/Siamese_neural_network)\n","are neural networks which **share weights between two or more sister networks**,\n","each producing embedding vectors of its respective inputs.\n","\n","In supervised similarity learning, the networks are then trained to **maximize the\n","contrast (distance)** between embeddings of inputs of **different classes**, while **minimizing the distance between\n","embeddings of similar classes**, resulting in embedding spaces that reflect\n","the class segmentation of the training inputs."]},{"cell_type":"markdown","metadata":{"id":"J5a-JEpcFxA4"},"source":["## **1. Setup - Load Data and Set Parameters**"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":3937,"status":"ok","timestamp":1639425048749,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"XH_P1F8WFxA5"},"outputs":[],"source":["import random\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"1Dz5BiAyFxA6"},"source":["### **Load the MNIST dataset**"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":757,"status":"ok","timestamp":1639425052050,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"F3JBHUyRFxA6","outputId":"5b2d0d50-9b9f-4d22-8c25-233aec6bf784"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n"]}],"source":["(x_train_val, y_train_val), (x_test, y_test) = keras.datasets.mnist.load_data()\n","\n","# Change the data type to a floating point format\n","x_train_val = x_train_val.astype(\"float32\")\n","x_test = x_test.astype(\"float32\")"]},{"cell_type":"markdown","metadata":{"id":"pn8OnyKzFxA5"},"source":["### **Define Hyperparameters**"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":229,"status":"ok","timestamp":1639425065926,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"7VgJqgxrFxA6"},"outputs":[],"source":["epochs = 10\n","batch_size = 16\n","margin = 1  # Margin for constrastive loss."]},{"cell_type":"markdown","metadata":{"id":"hBONfdV5FxA7"},"source":["### **Define training and validation sets**"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":213,"status":"ok","timestamp":1639425074937,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"INL_354sFxA7"},"outputs":[],"source":["# Keep 50% of train_val  in validation set\n","x_train, x_val = x_train_val[:30000], x_train_val[30000:]\n","y_train, y_val = y_train_val[:30000], y_train_val[30000:]\n","del x_train_val, y_train_val"]},{"cell_type":"markdown","metadata":{"id":"zboLOJu_FxA7"},"source":["## **2. Create pairs of images**\n","\n","We will train the model to differentiate between digits of different classes. \n","\n","For\n","example, digit `0` needs to be differentiated from the rest of the\n","digits (`1` through `9`), digit `1` - from `0` and `2` through `9`, and so on.\n","\n","To carry this out, we will select N random images from class A (for example,\n","for digit `0`) and pair them with N random images from another class B\n","(for example, for digit `1`). Then, we can repeat this process for all classes\n","of digits (until digit `9`). Once we have paired digit `0` with other digits,\n","we can repeat this process for the remaining classes for the rest of the digits\n","(from `1` until `9`)."]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":1900,"status":"ok","timestamp":1639425111817,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"9oNTWo0NFxA8"},"outputs":[],"source":["def make_pairs(x, y):\n","    \"\"\"Creates a tuple containing image pairs with corresponding label.\n","\n","    Arguments:\n","        x: List containing images, each index in this list corresponds to one image.\n","        y: List containing labels, each label with datatype of `int`.\n","\n","    Returns:\n","        Tuple containing two numpy arrays as (pairs_of_samples, labels),\n","        where pairs_of_samples' shape is (2len(x), 2,n_features_dims) and\n","        labels are a binary array of shape (2len(x)).\n","    \"\"\"\n","\n","    num_classes = max(y) + 1\n","    digit_indices = [np.where(y == i)[0] for i in range(num_classes)]\n","\n","    pairs = []\n","    labels = []\n","\n","    for idx1 in range(len(x)):\n","        # add a matching example\n","        x1 = x[idx1]\n","        label1 = y[idx1]\n","        idx2 = random.choice(digit_indices[label1])\n","        x2 = x[idx2]\n","\n","        pairs += [[x1, x2]]\n","        labels += [1]\n","\n","        # add a non-matching example\n","        label2 = random.randint(0, num_classes - 1)\n","        while label2 == label1:\n","            label2 = random.randint(0, num_classes - 1)\n","\n","        idx2 = random.choice(digit_indices[label2])\n","        x2 = x[idx2]\n","\n","        pairs += [[x1, x2]]\n","        labels += [0]\n","\n","    return np.array(pairs), np.array(labels).astype(\"float32\")\n","\n","\n","# make train pairs\n","pairs_train, labels_train = make_pairs(x_train, y_train)\n","\n","# make validation pairs\n","pairs_val, labels_val = make_pairs(x_val, y_val)\n","\n","# make test pairs\n","pairs_test, labels_test = make_pairs(x_test, y_test)"]},{"cell_type":"markdown","metadata":{"id":"eC-LGD1bFxA8"},"source":["We get:\n","\n","**pairs_train.shape = (60000, 2, 28, 28)**\n","\n","- We have 60,000 pairs\n","- Each pair contains 2 images\n","- Each image has shape `(28, 28)`"]},{"cell_type":"markdown","metadata":{"id":"gOItwdWsFxA8"},"source":["**Split the training pairs**"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":263,"status":"ok","timestamp":1639425137273,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"Tdw3e8S_FxA9"},"outputs":[],"source":["x_train_1 = pairs_train[:, 0]  # x_train_1.shape is (60000, 28, 28)\n","x_train_2 = pairs_train[:, 1]"]},{"cell_type":"markdown","metadata":{"id":"qLAwSrSgFxA9"},"source":["**Split the validation pairs**"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":464,"status":"ok","timestamp":1639425139865,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"ZzZY6lZFFxA9"},"outputs":[],"source":["x_val_1 = pairs_val[:, 0]  # x_val_1.shape = (60000, 28, 28)\n","x_val_2 = pairs_val[:, 1]"]},{"cell_type":"markdown","metadata":{"id":"NPOroeEVFxA-"},"source":["**Split the test pairs**"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":345,"status":"ok","timestamp":1639425146029,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"315wneWZFxA-"},"outputs":[],"source":["x_test_1 = pairs_test[:, 0]  # x_test_1.shape = (20000, 28, 28)\n","x_test_2 = pairs_test[:, 1]"]},{"cell_type":"markdown","metadata":{"id":"Ug3pmxe8FxA-"},"source":["### **Visualize pairs and their labels**"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":210,"status":"ok","timestamp":1639425151481,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"R37iCOL1FxA-"},"outputs":[],"source":["def visualize(pairs, labels, to_show=6, num_col=3, predictions=None, test=False):\n","    \"\"\"Creates a plot of pairs and labels, and prediction if it's test dataset.\n","\n","    Arguments:\n","        pairs: Numpy Array, of pairs to visualize, having shape\n","               (Number of pairs, 2, 28, 28).\n","        to_show: Int, number of examples to visualize (default is 6)\n","                `to_show` must be an integral multiple of `num_col`.\n","                 Otherwise it will be trimmed if it is greater than num_col,\n","                 and incremented if if it is less then num_col.\n","        num_col: Int, number of images in one row - (default is 3)\n","                 For test and train respectively, it should not exceed 3 and 7.\n","        predictions: Numpy Array of predictions with shape (to_show, 1) -\n","                     (default is None)\n","                     Must be passed when test=True.\n","        test: Boolean telling whether the dataset being visualized is\n","              train dataset or test dataset - (default False).\n","\n","    Returns:\n","        None.\n","    \"\"\"\n","\n","    # Define num_row\n","    # If to_show % num_col != 0\n","    #    trim to_show,\n","    #       to trim to_show limit num_row to the point where\n","    #       to_show % num_col == 0\n","    #\n","    # If to_show//num_col == 0\n","    #    then it means num_col is greater then to_show\n","    #    increment to_show\n","    #       to increment to_show set num_row to 1\n","    num_row = to_show // num_col if to_show // num_col != 0 else 1\n","\n","    # `to_show` must be an integral multiple of `num_col`\n","    #  we found num_row and we have num_col\n","    #  to increment or decrement to_show\n","    #  to make it integral multiple of `num_col`\n","    #  simply set it equal to num_row * num_col\n","    to_show = num_row * num_col\n","\n","    # Plot the images\n","    fig, axes = plt.subplots(num_row, num_col, figsize=(5, 5))\n","    for i in range(to_show):\n","\n","        # If the number of rows is 1, the axes array is one-dimensional\n","        if num_row == 1:\n","            ax = axes[i % num_col]\n","        else:\n","            ax = axes[i // num_col, i % num_col]\n","\n","        ax.imshow(tf.concat([pairs[i][0], pairs[i][1]], axis=1), cmap=\"gray\")\n","        ax.set_axis_off()\n","        if test:\n","            ax.set_title(\"True: {} | Pred: {:.5f}\".format(labels[i], predictions[i][0]))\n","        else:\n","            ax.set_title(\"Label: {}\".format(labels[i]))\n","    if test:\n","        plt.tight_layout(rect=(0, 0, 1.9, 1.9), w_pad=0.0)\n","    else:\n","        plt.tight_layout(rect=(0, 0, 1.5, 1.5))\n","    plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Q2sWR7C3FxA_"},"source":["**Inspect training pairs**"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":108},"executionInfo":{"elapsed":761,"status":"ok","timestamp":1639425157572,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"ZGXkXb35FxA_","outputId":"03b24b17-9272-4174-8b6d-47127e714f9d"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 360x360 with 4 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["visualize(pairs_train[:-1], labels_train[:-1], to_show=4, num_col=4)"]},{"cell_type":"markdown","metadata":{"id":"2eLDVFREFxA_"},"source":["**Inspect validation pairs**"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":108},"executionInfo":{"elapsed":846,"status":"ok","timestamp":1639425172720,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"hrVpOByFFxBA","outputId":"238fae32-95c6-4495-e4ec-bb39a22fd0fa"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 360x360 with 4 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["visualize(pairs_val[:-1], labels_val[:-1], to_show=4, num_col=4)"]},{"cell_type":"markdown","metadata":{"id":"YvekSr97FxBA"},"source":["**Inspect test pairs**"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":108},"executionInfo":{"elapsed":659,"status":"ok","timestamp":1639425182729,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"tUA9awGAFxBA","outputId":"d2125e6b-f383-4e0f-de5b-29d0197d0012"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 360x360 with 4 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["visualize(pairs_test[:-1], labels_test[:-1], to_show=4, num_col=4)"]},{"cell_type":"markdown","metadata":{"id":"j0iVn9vwFxBB"},"source":["## **3. Define the model**\n","\n","There are be two input layers, each leading to its own network, which\n","produces embeddings. \n","\n","A `Lambda` layer then merges them using an\n","[Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) and the\n","merged output is fed to the final network."]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":584,"status":"ok","timestamp":1639425245940,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"FYUesA7oFxBB"},"outputs":[],"source":["# Provided two tensors t1 and t2\n","# Euclidean distance = sqrt(sum(square(t1-t2)))\n","def euclidean_distance(vects):\n","    \"\"\"Find the Euclidean distance between two vectors.\n","\n","    Arguments:\n","        vects: List containing two tensors of same length.\n","\n","    Returns:\n","        Tensor containing euclidean distance\n","        (as floating point value) between vectors.\n","    \"\"\"\n","\n","    x, y = vects\n","    sum_square = tf.math.reduce_sum(tf.math.square(x - y), axis=1, keepdims=True)\n","    return tf.math.sqrt(tf.math.maximum(sum_square, tf.keras.backend.epsilon()))\n","\n","\n","input = layers.Input((28, 28, 1))\n","x = tf.keras.layers.BatchNormalization()(input)\n","x = layers.Conv2D(4, (5, 5), activation=\"tanh\")(x)\n","x = layers.AveragePooling2D(pool_size=(2, 2))(x)\n","x = layers.Conv2D(16, (5, 5), activation=\"tanh\")(x)\n","x = layers.AveragePooling2D(pool_size=(2, 2))(x)\n","x = layers.Flatten()(x)\n","\n","x = tf.keras.layers.BatchNormalization()(x)\n","x = layers.Dense(10, activation=\"tanh\")(x)\n","embedding_network = keras.Model(input, x)\n","\n","\n","input_1 = layers.Input((28, 28, 1))\n","input_2 = layers.Input((28, 28, 1))\n","\n","# As mentioned above, Siamese Network share weights between\n","# tower networks (sister networks). To allow this, we will use\n","# same embedding network for both tower networks.\n","tower_1 = embedding_network(input_1)\n","tower_2 = embedding_network(input_2)\n","\n","merge_layer = layers.Lambda(euclidean_distance)([tower_1, tower_2])\n","normal_layer = tf.keras.layers.BatchNormalization()(merge_layer)\n","output_layer = layers.Dense(1, activation=\"sigmoid\")(normal_layer)\n","siamese = keras.Model(inputs=[input_1, input_2], outputs=output_layer)"]},{"cell_type":"markdown","metadata":{"id":"vTjzlIUfFxBB"},"source":["## **4. Define the Constrastive Loss and Train**"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":213,"status":"ok","timestamp":1639425300780,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"sVe6e-fvFxBB"},"outputs":[],"source":["def loss(margin=1):\n","    \"\"\"Provides 'constrastive_loss' an enclosing scope with variable 'margin'.\n","\n","  Arguments:\n","      margin: Integer, defines the baseline for distance for which pairs\n","              should be classified as dissimilar. - (default is 1).\n","\n","  Returns:\n","      'constrastive_loss' function with data ('margin') attached.\n","  \"\"\"\n","\n","    # Contrastive loss = mean( (1-true_value) * square(prediction) +\n","    #                         true_value * square( max(margin-prediction, 0) ))\n","    def contrastive_loss(y_true, y_pred):\n","        \"\"\"Calculates the constrastive loss.\n","\n","      Arguments:\n","          y_true: List of labels, each label is of type float32.\n","          y_pred: List of predictions of same length as of y_true,\n","                  each label is of type float32.\n","\n","      Returns:\n","          A tensor containing constrastive loss as floating point value.\n","      \"\"\"\n","\n","        square_pred = tf.math.square(y_pred)\n","        margin_square = tf.math.square(tf.math.maximum(margin - (y_pred), 0))\n","        return tf.math.reduce_mean(\n","            (1 - y_true) * square_pred + (y_true) * margin_square\n","        )\n","\n","    return contrastive_loss"]},{"cell_type":"markdown","metadata":{"id":"EcoY1LpbFxBC"},"source":["### **Compile the model with the contrastive loss**"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":418,"status":"ok","timestamp":1639425304564,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":0},"id":"rCgd4-ooFxBD","outputId":"9242c43c-3880-4940-b112-70b8e081e9ee"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model_1\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_2 (InputLayer)           [(None, 28, 28, 1)]  0           []                               \n","                                                                                                  \n"," input_3 (InputLayer)           [(None, 28, 28, 1)]  0           []                               \n","                                                                                                  \n"," model (Functional)             (None, 10)           5318        ['input_2[0][0]',                \n","                                                                  'input_3[0][0]']                \n","                                                                                                  \n"," lambda (Lambda)                (None, 1)            0           ['model[0][0]',                  \n","                                                                  'model[1][0]']                  \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 1)           4           ['lambda[0][0]']                 \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense_1 (Dense)                (None, 1)            2           ['batch_normalization_2[0][0]']  \n","                                                                                                  \n","==================================================================================================\n","Total params: 5,324\n","Trainable params: 4,808\n","Non-trainable params: 516\n","__________________________________________________________________________________________________\n"]}],"source":["siamese.compile(loss=loss(margin=margin), optimizer=\"RMSprop\", metrics=[\"accuracy\"])\n","siamese.summary()"]},{"cell_type":"markdown","metadata":{"id":"MWugP5GuFxBE"},"source":["### **Train the model**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"NtTs54YQFxBF"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","3750/3750 [==============================] - 90s 24ms/step - loss: 0.0874 - accuracy: 0.8827 - val_loss: 0.0345 - val_accuracy: 0.9550\n","Epoch 2/10\n","3750/3750 [==============================] - 89s 24ms/step - loss: 0.0515 - accuracy: 0.9321 - val_loss: 0.0269 - val_accuracy: 0.9653\n","Epoch 3/10\n","3750/3750 [==============================] - 88s 23ms/step - loss: 0.0418 - accuracy: 0.9449 - val_loss: 0.0284 - val_accuracy: 0.9632\n","Epoch 4/10\n","3750/3750 [==============================] - 88s 23ms/step - loss: 0.0364 - accuracy: 0.9535 - val_loss: 0.0205 - val_accuracy: 0.9736\n","Epoch 5/10\n","3750/3750 [==============================] - 87s 23ms/step - loss: 0.0344 - accuracy: 0.9553 - val_loss: 0.0188 - val_accuracy: 0.9761\n","Epoch 6/10\n","3750/3750 [==============================] - 87s 23ms/step - loss: 0.0325 - accuracy: 0.9582 - val_loss: 0.0213 - val_accuracy: 0.9729\n","Epoch 7/10\n","3750/3750 [==============================] - 87s 23ms/step - loss: 0.0309 - accuracy: 0.9604 - val_loss: 0.0163 - val_accuracy: 0.9790\n","Epoch 8/10\n","3750/3750 [==============================] - 87s 23ms/step - loss: 0.0295 - accuracy: 0.9619 - val_loss: 0.0147 - val_accuracy: 0.9809\n","Epoch 9/10\n","3750/3750 [==============================] - 86s 23ms/step - loss: 0.0296 - accuracy: 0.9609 - val_loss: 0.0163 - val_accuracy: 0.9787\n","Epoch 10/10\n","3750/3750 [==============================] - 83s 22ms/step - loss: 0.0295 - accuracy: 0.9624 - val_loss: 0.0154 - val_accuracy: 0.9801\n"]}],"source":["history = siamese.fit(\n","    [x_train_1, x_train_2],\n","    labels_train,\n","    validation_data=([x_val_1, x_val_2], labels_val),\n","    batch_size=batch_size,\n","    epochs=epochs,\n",")"]},{"cell_type":"markdown","metadata":{"id":"RZJ07vmbFxBG"},"source":["## **5. Visualize results**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":571},"executionInfo":{"elapsed":326,"status":"ok","timestamp":1624306598115,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":240},"id":"qZ1MfOFkFxBG","outputId":"b8e1fdfe-d20d-4071-f268-367f7d24c38b"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["def plt_metric(history, metric, title, has_valid=True):\n","    \"\"\"Plots the given 'metric' from 'history'.\n","\n","    Arguments:\n","        history: history attribute of History object returned from Model.fit.\n","        metric: Metric to plot, a string value present as key in 'history'.\n","        title: A string to be used as title of plot.\n","        has_valid: Boolean, true if valid data was passed to Model.fit else false.\n","\n","    Returns:\n","        None.\n","    \"\"\"\n","    plt.plot(history[metric])\n","    if has_valid:\n","        plt.plot(history[\"val_\" + metric])\n","        plt.legend([\"train\", \"validation\"], loc=\"upper left\")\n","    plt.title(title)\n","    plt.ylabel(metric)\n","    plt.xlabel(\"epoch\")\n","    plt.show()\n","\n","\n","# Plot the accuracy\n","plt_metric(history=history.history, metric=\"accuracy\", title=\"Model accuracy\")\n","\n","# Plot the constrastive loss\n","plt_metric(history=history.history, metric=\"loss\", title=\"Constrastive Loss\")"]},{"cell_type":"markdown","metadata":{"id":"P55ixE-rFxBG"},"source":["### **Evaluate the model**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6963,"status":"ok","timestamp":1624315288986,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":240},"id":"DFBAAU1uFxBG","outputId":"7f004347-fd83-4c5f-fac4-fcebb9e57b7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["625/625 [==============================] - 7s 10ms/step - loss: 0.0137 - accuracy: 0.9822\n","test loss, test acc: [0.013656150549650192, 0.982200026512146]\n"]}],"source":["results = siamese.evaluate([x_test_1, x_test_2], labels_test)\n","print(\"test loss, test acc:\", results)"]},{"cell_type":"markdown","metadata":{"id":"8elTpRHsFxBH"},"source":["### **Visualize the predictions**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"elapsed":5552,"status":"ok","timestamp":1624315301830,"user":{"displayName":"Rajeev Ratan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtO-hUyDqrPmYR3HGcaXMtwRIq1ObsdPjhiGDSWSw=s64","userId":"08597265227091462140"},"user_tz":240},"id":"sm8vj0X_FxBH","outputId":"b5f7fa35-27a8-4002-ec58-44fa2ad6921a"},"outputs":[{"data":{"image/png":"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\n","text/plain":["\u003cFigure size 360x360 with 3 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["predictions = siamese.predict([x_test_1, x_test_2])\n","visualize(pairs_test, labels_test, to_show=3, predictions=predictions, test=True)"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"37. Keras Siamese Networks ","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/siamese_contrastive.ipynb","timestamp":1624304530552}],"version":""},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}